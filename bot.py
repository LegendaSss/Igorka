import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import (
    get_tools, get_issued_tools, create_tool_request, 
    approve_issue_request, get_issue_request_info, get_tool_by_id,
    get_issued_tool_by_id, update_tool_status, add_tool_history,
    get_tool_history, get_overdue_tools, get_all_issue_requests,
    create_tables, get_return_info, complete_return, DatabaseConnection
)
from config import API_TOKEN, WEBHOOK_HOST, WEBHOOK_PATH, WEBAPP_HOST, WEBAPP_PORT
from datetime import datetime
import os
from aiohttp import web
from populate_database import populate_database
import time
from aiogram.dispatcher.filters import Text
from datetime import timedelta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = API_TOKEN
ADMIN_ID = 1495719377  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
Bot.set_current(bot)
Dispatcher.set_current(dp)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
dp.middleware.setup(LoggingMiddleware())

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
tools = get_tools()
logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(tools)}")
if tools:
    logger.info("–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
    for tool in tools[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        logger.info(f"- {tool}")
else:
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    populate_database()
    tools = get_tools()
    logger.info(f"–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    if tools:
        logger.info("–ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        for tool in tools[:5]:
            logger.info(f"- {tool}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
create_tables()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
class ToolReturnState(StatesGroup):
    waiting_for_tool_id = State()
    waiting_for_photo = State()
    waiting_for_confirmation = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchState(StatesGroup):
    waiting_for_query = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏
class ToolIssueState(StatesGroup):
    waiting_for_fullname = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
class ReturnToolStates(StatesGroup):
    waiting_for_photo = State()

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
TOOLS_PER_PAGE = 10

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
_last_callback_time = {}

async def throttle_callback(callback_query: types.CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è callback-–∑–∞–ø—Ä–æ—Å—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, False –µ—Å–ª–∏ –µ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
    """
    user_id = callback_query.from_user.id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if user_id in _last_callback_time:
        last_time = _last_callback_time[user_id]
        if current_time - last_time < 1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ - 1 —Å–µ–∫—É–Ω–¥–∞
            await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Ç–∞–∫ —á–∞—Å—Ç–æ", show_alert=True)
            return False
            
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    _last_callback_time[user_id] = current_time
    return True

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
class ToolIssueState(StatesGroup):
    waiting_for_tool_id = State()
    waiting_for_employee_name = State()
    waiting_for_duration = State()
    waiting_for_confirmation = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
class ToolReturnState(StatesGroup):
    waiting_for_tool_id = State()
    waiting_for_photo = State()
    waiting_for_confirmation = State()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
def is_admin(message: types.Message):
    return str(message.from_user.id) == str(ADMIN_ID)

# –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton('/list'),
        types.KeyboardButton('/search'),
        types.KeyboardButton('/issue'),
        types.KeyboardButton('/return'),
        types.KeyboardButton('/help')
    ]
    keyboard.add(*buttons)
    
    if is_admin(message):
        admin_buttons = [
            types.KeyboardButton('/history'),
            types.KeyboardButton('/report'),
            types.KeyboardButton('/overdue')
        ]
        keyboard.add(*admin_buttons)
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
        "/search - –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n"
        "/issue - –í—ã–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"
        "/return - –í–µ—Ä–Ω—É—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"
        "/help - –ü–æ–º–æ—â—å",
        reply_markup=keyboard
    )

async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üîß –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
        "/search - –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "/issue - –í—ã–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"
        "/return - –í–µ—Ä–Ω—É—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
    )
    
    if is_admin(message):
        help_text += (
            "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "/history - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            "/report - –û—Ç—á–µ—Ç –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º\n"
            "/overdue - –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
        )
    
    await message.answer(help_text)

async def cancel_handler(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.finish()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
async def cmd_list(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    with DatabaseConnection() as db:
        cursor = db.conn.cursor()
        cursor.execute("""
            SELECT t.id, t.name, t.quantity,
                   COALESCE(COUNT(CASE WHEN it.return_date IS NULL THEN 1 END), 0) as issued_count
            FROM tools t
            LEFT JOIN issued_tools it ON t.id = it.tool_id
            GROUP BY t.id, t.name, t.quantity
            ORDER BY t.name
        """)
        tools = cursor.fetchall()
    
    if not tools:
        await message.answer(
            "‚ùå –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    result = "üìã *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:*\n\n"
    for tool_id, name, total_qty, issued_qty in tools:
        available_qty = total_qty - issued_qty
        status = "üü¢" if available_qty > 0 else "üî¥"
        
        result += f"{status} *{name}*\n"
        result += f"‚îå ID: {tool_id}\n"
        result += f"‚îî –î–æ—Å—Ç—É–ø–Ω–æ: {available_qty} –∏–∑ {total_qty}\n\n"
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('/issue'), types.KeyboardButton('/return'))
    keyboard.add(types.KeyboardButton('/search'), types.KeyboardButton('/help'))
    
    await message.answer(
        result,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –í—ã–¥–∞—á–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
async def cmd_issue_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–¥–∞—á–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('/cancel'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    with DatabaseConnection() as db:
        cursor = db.conn.cursor()
        cursor.execute("""
            SELECT id, name, quantity 
            FROM tools 
            WHERE quantity > 0
        """)
        tools = cursor.fetchall()
    
    if not tools:
        await message.answer(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    tools_list = "\n".join([f"ID: {t[0]} - {t[1]} (–¥–æ—Å—Ç—É–ø–Ω–æ: {t[2]})" for t in tools])
    await message.answer(
        f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n\n{tools_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
        reply_markup=keyboard
    )
    await ToolIssueState.waiting_for_tool_id.set()

async def process_tool_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    try:
        tool_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.")
        return
    
    with DatabaseConnection() as db:
        cursor = db.conn.cursor()
        cursor.execute(
            "SELECT name, quantity FROM tools WHERE id = ?",
            (tool_id,)
        )
        tool = cursor.fetchone()
    
    if not tool or tool[1] <= 0:
        await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    await state.update_data(tool_id=tool_id, tool_name=tool[0])
    await message.answer(
        f"üë§ –í—ã –≤—ã–±—Ä–∞–ª–∏: {tool[0]}\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"
    )
    await ToolIssueState.waiting_for_employee_name.set()

async def process_employee_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    employee_name = message.text
    if len(employee_name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.")
        return
    
    await state.update_data(employee_name=employee_name)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['1 –¥–µ–Ω—å', '3 –¥–Ω—è', '7 –¥–Ω–µ–π', '14 –¥–Ω–µ–π', '/cancel']
    keyboard.add(*buttons)
    
    await message.answer(
        "‚è≥ –ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç?",
        reply_markup=keyboard
    )
    await ToolIssueState.waiting_for_duration.set()

async def process_duration(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –≤—ã–¥–∞—á–∏"""
    duration_text = message.text.lower()
    duration_map = {
        '1 –¥–µ–Ω—å': 1,
        '3 –¥–Ω—è': 3,
        '7 –¥–Ω–µ–π': 7,
        '14 –¥–Ω–µ–π': 14
    }
    
    if duration_text not in duration_map:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return
    
    days = duration_map[duration_text]
    data = await state.get_data()
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    
    await state.update_data(duration_days=days)
    await message.answer(
        f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {data['tool_name']}\n"
        f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {data['employee_name']}\n"
        f"‚è≥ –°—Ä–æ–∫: {days} –¥–Ω–µ–π\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard
    )
    await ToolIssueState.waiting_for_confirmation.set()

async def process_issue_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–¥–∞—á–∏"""
    if message.text != '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        await state.finish()
        await message.answer(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    data = await state.get_data()
    tool_id = data['tool_id']
    employee_name = data['employee_name']
    duration_days = data['duration_days']
    
    issue_date = datetime.now()
    return_date = issue_date + timedelta(days=duration_days)
    
    try:
        with DatabaseConnection() as db:
            cursor = db.conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            cursor.execute(
                "SELECT quantity FROM tools WHERE id = ?",
                (tool_id,)
            )
            quantity = cursor.fetchone()[0]
            
            if quantity <= 0:
                raise ValueError("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cursor.execute(
                "UPDATE tools SET quantity = quantity - 1 WHERE id = ?",
                (tool_id,)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ
            cursor.execute("""
                INSERT INTO issued_tools 
                (tool_id, employee_name, issue_date, expected_return_date)
                VALUES (?, ?, ?, ?)
            """, (tool_id, employee_name, issue_date, return_date))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            cursor.execute("""
                INSERT INTO tool_history 
                (tool_id, action, employee_name, timestamp)
                VALUES (?, 'issued', ?, ?)
            """, (tool_id, employee_name, issue_date))
            
            db.conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            if ADMIN_ID:
                await bot.send_message(
                    ADMIN_ID,
                    f"üì¢ –í—ã–¥–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:\n"
                    f"üîß {data['tool_name']}\n"
                    f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}\n"
                    f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}"
                )
            
            await message.answer(
                f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!\n\n"
                f"üîß {data['tool_name']}\n"
                f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–æ–≤—Ä–µ–º—è.",
                reply_markup=types.ReplyKeyboardRemove()
            )
            
    except Exception as e:
        logger.error(f"Error issuing tool: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    finally:
        await state.finish()

# –í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
async def cmd_return_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('/cancel'))
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    with DatabaseConnection() as db:
        cursor = db.conn.cursor()
        cursor.execute("""
            SELECT t.id, t.name, it.employee_name, it.issue_date 
            FROM tools t
            JOIN issued_tools it ON t.id = it.tool_id
            WHERE it.return_date IS NULL
        """)
        tools = cursor.fetchall()
    
    if not tools:
        await message.answer(
            "‚ùå –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    tools_list = "\n".join([
        f"ID: {t[0]} - {t[1]} (–≤—ã–¥–∞–Ω: {t[2]} {t[3].split()[0]})" 
        for t in tools
    ])
    
    await message.answer(
        f"üîß –í—ã–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n\n{tools_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:",
        reply_markup=keyboard
    )
    await ToolReturnState.waiting_for_tool_id.set()

async def process_return_tool_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    try:
        tool_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.")
        return
    
    with DatabaseConnection() as db:
        cursor = db.conn.cursor()
        cursor.execute("""
            SELECT t.name, it.employee_name, it.issue_date
            FROM tools t
            JOIN issued_tools it ON t.id = it.tool_id
            WHERE t.id = ? AND it.return_date IS NULL
        """, (tool_id,))
        tool = cursor.fetchone()
    
    if not tool:
        await message.answer(
            "‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω."
        )
        return
    
    await state.update_data(tool_id=tool_id, tool_name=tool[0])
    await message.answer(
        f"üì∏ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ *{tool[0]}* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.\n\n"
        "–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.",
        parse_mode="Markdown"
    )
    await ToolReturnState.waiting_for_photo.set()

async def process_return_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    if not message.photo:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."
        )
        return
    
    data = await state.get_data()
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    
    await message.answer(
        f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç–∞:\n\n"
        f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {data['tool_name']}\n"
        "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(photo_id=photo.file_id)
    await ToolReturnState.waiting_for_confirmation.set()

async def process_return_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    if message.text != '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        await state.finish()
        await message.answer(
            "‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
    
    data = await state.get_data()
    tool_id = data['tool_id']
    photo_id = data['photo_id']
    
    try:
        with DatabaseConnection() as db:
            cursor = db.conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ
            cursor.execute("""
                SELECT employee_name, issue_date 
                FROM issued_tools 
                WHERE tool_id = ? AND return_date IS NULL
            """, (tool_id,))
            issue_info = cursor.fetchone()
            
            if not issue_info:
                raise ValueError("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω")
            
            employee_name, issue_date = issue_info
            return_date = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ
            cursor.execute("""
                UPDATE issued_tools 
                SET return_date = ?, return_photo = ?
                WHERE tool_id = ? AND return_date IS NULL
            """, (return_date, photo_id, tool_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            cursor.execute("""
                UPDATE tools 
                SET quantity = quantity + 1
                WHERE id = ?
            """, (tool_id,))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            cursor.execute("""
                INSERT INTO tool_history 
                (tool_id, action, employee_name, timestamp)
                VALUES (?, 'returned', ?, ?)
            """, (tool_id, employee_name, return_date))
            
            db.conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            if ADMIN_ID:
                await bot.send_photo(
                    ADMIN_ID,
                    photo_id,
                    caption=f"üì¢ –í–æ–∑–≤—Ä–∞—â–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:\n"
                    f"üîß {data['tool_name']}\n"
                    f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}\n"
                    f"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {issue_date}\n"
                    f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}"
                )
            
            await message.answer(
                f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω!\n\n"
                f"üîß {data['tool_name']}\n"
                f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}",
                reply_markup=types.ReplyKeyboardRemove()
            )
            
    except Exception as e:
        logger.error(f"Error returning tool: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    finally:
        await state.finish()

# –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
async def cmd_search_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('/cancel'))
    
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:",
        reply_markup=keyboard
    )
    await SearchState.waiting_for_query.set()

async def process_search_query(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    search_query = message.text.lower()
    
    with DatabaseConnection() as db:
        cursor = db.conn.cursor()
        cursor.execute("""
            SELECT t.id, t.name, t.quantity,
                   COALESCE(COUNT(CASE WHEN it.return_date IS NULL THEN 1 END), 0) as issued_count
            FROM tools t
            LEFT JOIN issued_tools it ON t.id = it.tool_id
            WHERE LOWER(t.name) LIKE ?
            GROUP BY t.id, t.name, t.quantity
        """, (f"%{search_query}%",))
        tools = cursor.fetchall()
    
    if not tools:
        await message.answer(
            "‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.finish()
        return
    
    result = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
    for tool_id, name, total_qty, issued_qty in tools:
        available_qty = total_qty - issued_qty
        status = "üü¢" if available_qty > 0 else "üî¥"
        
        result += f"{status} *{name}*\n"
        result += f"‚îå ID: {tool_id}\n"
        result += f"‚îî –î–æ—Å—Ç—É–ø–Ω–æ: {available_qty} –∏–∑ {total_qty}\n\n"
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('/issue'), types.KeyboardButton('/search'))
    keyboard.add(types.KeyboardButton('/help'))
    
    await message.answer(
        result,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await state.finish()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def cmd_history(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    with DatabaseConnection() as db:
        cursor = db.conn.cursor()
        cursor.execute("""
            SELECT t.name, th.action, th.employee_name, th.timestamp
            FROM tool_history th
            JOIN tools t ON th.tool_id = t.id
            ORDER BY th.timestamp DESC
            LIMIT 20
        """)
        history = cursor.fetchall()
    
    if not history:
        await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.")
        return
    
    result = "üìú *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n\n"
    for name, action, employee, timestamp in history:
        action_emoji = "üì•" if action == "issued" else "üì§"
        result += f"{action_emoji} *{name}*\n"
        result += f"‚îå –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
        result += f"‚îú –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee}\n"
        result += f"‚îî –î–∞—Ç–∞: {timestamp.split()[0]}\n\n"
    
    await message.answer(result, parse_mode="Markdown")

async def cmd_report(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    with DatabaseConnection() as db:
        cursor = db.conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("""
            SELECT 
                COUNT(*) as total_tools,
                SUM(quantity) as total_quantity,
                (SELECT COUNT(*) FROM issued_tools WHERE return_date IS NULL) as issued_count
            FROM tools
        """)
        stats = cursor.fetchone()
        
        # –¢–æ–ø –≤—ã–¥–∞–≤–∞–µ–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        cursor.execute("""
            SELECT t.name, COUNT(*) as issue_count
            FROM issued_tools it
            JOIN tools t ON it.tool_id = t.id
            GROUP BY t.id, t.name
            ORDER BY issue_count DESC
            LIMIT 5
        """)
        top_tools = cursor.fetchall()
        
        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        cursor.execute("""
            SELECT t.name, it.employee_name, it.expected_return_date
            FROM issued_tools it
            JOIN tools t ON it.tool_id = t.id
            WHERE it.return_date IS NULL 
            AND it.expected_return_date < date('now')
        """)
        overdue = cursor.fetchall()
    
    result = "üìä *–û—Ç—á–µ—Ç –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º*\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    result += "*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    result += f"‚îå –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {stats[0]}\n"
    result += f"‚îú –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats[1]}\n"
    result += f"‚îî –°–µ–π—á–∞—Å –≤—ã–¥–∞–Ω–æ: {stats[2]}\n\n"
    
    # –¢–æ–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    if top_tools:
        result += "*–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:*\n"
        for name, count in top_tools:
            result += f"‚Ä¢ {name}: {count} —Ä–∞–∑(–∞)\n"
        result += "\n"
    
    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
    if overdue:
        result += "‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:*\n"
        for name, employee, date in overdue:
            result += f"‚îå {name}\n"
            result += f"‚îú –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee}\n"
            result += f"‚îî –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {date}\n\n"
    
    await message.answer(result, parse_mode="Markdown")

async def cmd_overdue(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    with DatabaseConnection() as db:
        cursor = db.conn.cursor()
        cursor.execute("""
            SELECT 
                t.name,
                it.employee_name,
                it.issue_date,
                it.expected_return_date,
                julianday('now') - julianday(it.expected_return_date) as days_overdue
            FROM issued_tools it
            JOIN tools t ON it.tool_id = t.id
            WHERE it.return_date IS NULL 
            AND it.expected_return_date < date('now')
            ORDER BY days_overdue DESC
        """)
        overdue = cursor.fetchall()
    
    if not overdue:
        await message.answer("‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")
        return
    
    result = "‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:*\n\n"
    for name, employee, issue_date, expected_date, days in overdue:
        result += f"üîß *{name}*\n"
        result += f"‚îå –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee}\n"
        result += f"‚îú –í—ã–¥–∞–Ω: {issue_date.split()[0]}\n"
        result += f"‚îú –û–∂–∏–¥–∞–ª—Å—è: {expected_date}\n"
        result += f"‚îî –ü—Ä–æ—Å—Ä–æ—á–∫–∞: {int(days)} –¥–Ω–µ–π\n\n"
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('/report'))
    
    await message.answer(
        result,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(cmd_help, commands=['help'])
    dp.register_message_handler(cmd_list, commands=['list'])
    dp.register_message_handler(cancel_handler, commands=['cancel'], state='*')
    
    # –í—ã–¥–∞—á–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    dp.register_message_handler(cmd_issue_start, commands=['issue'])
    dp.register_message_handler(process_tool_id, state=ToolIssueState.waiting_for_tool_id)
    dp.register_message_handler(process_employee_name, state=ToolIssueState.waiting_for_employee_name)
    dp.register_message_handler(process_duration, state=ToolIssueState.waiting_for_duration)
    dp.register_message_handler(process_issue_confirmation, state=ToolIssueState.waiting_for_confirmation)
    
    # –í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    dp.register_message_handler(cmd_return_start, commands=['return'])
    dp.register_message_handler(process_return_tool_id, state=ToolReturnState.waiting_for_tool_id)
    dp.register_message_handler(process_return_photo, state=ToolReturnState.waiting_for_photo, content_types=['photo'])
    dp.register_message_handler(process_return_confirmation, state=ToolReturnState.waiting_for_confirmation)
    
    # –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    dp.register_message_handler(cmd_search_start, commands=['search'])
    dp.register_message_handler(process_search_query, state=SearchState.waiting_for_query)
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(cmd_history, commands=['history'])
    dp.register_message_handler(cmd_report, commands=['report'])
    dp.register_message_handler(cmd_overdue, commands=['overdue'])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
async def on_startup(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
    create_tables()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
    await bot.set_webhook(webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

async def on_shutdown(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_handlers(dp)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        app = web.Application()
        app.router.add_post(WEBHOOK_PATH, handle_webhook)
        app.router.add_get("/health", health_check)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        app.on_startup.append(on_startup)
        app.on_shutdown.append(on_shutdown)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()