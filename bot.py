import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import (
    get_tools, get_issued_tools, create_tool_request, 
    approve_issue_request, get_issue_request_info, get_tool_by_id,
    get_issued_tool_by_id, update_tool_status, add_tool_history,
    get_tool_history, get_overdue_tools, get_all_issue_requests,
    create_tables, get_return_info, complete_return, DatabaseConnection
)
from config import API_TOKEN
from datetime import datetime
import os
from aiohttp import web
from populate_database import populate_database
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = API_TOKEN
ADMIN_ID = 1495719377  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
Bot.set_current(bot)
Dispatcher.set_current(dp)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
tools = get_tools()
logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(tools)}")
if tools:
    logger.info("–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
    for tool in tools[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        logger.info(f"- {tool}")
else:
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    populate_database()
    tools = get_tools()
    logger.info(f"–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    if tools:
        logger.info("–ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        for tool in tools[:5]:
            logger.info(f"- {tool}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
create_tables()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
dp.middleware.setup(LoggingMiddleware())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
class ToolReturnState(StatesGroup):
    waiting_for_tool_id = State()
    waiting_for_photo = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchState(StatesGroup):
    waiting_for_query = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏
class ToolIssueState(StatesGroup):
    waiting_for_fullname = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
class ReturnToolStates(StatesGroup):
    waiting_for_photo = State()

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
TOOLS_PER_PAGE = 10

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
_last_callback_time = {}

async def throttle_callback(callback_query: types.CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è callback-–∑–∞–ø—Ä–æ—Å—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, False –µ—Å–ª–∏ –µ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
    """
    user_id = callback_query.from_user.id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if user_id in _last_callback_time:
        last_time = _last_callback_time[user_id]
        if current_time - last_time < 1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ - 1 —Å–µ–∫—É–Ω–¥–∞
            await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Ç–∞–∫ —á–∞—Å—Ç–æ", show_alert=True)
            return False
            
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    _last_callback_time[user_id] = current_time
    return True

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.add(
        InlineKeyboardButton("üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="tools"),
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_tools")
    )
    keyboard.add(
        InlineKeyboardButton("üì∏ –í–µ—Ä–Ω—É—Ç—å", callback_data="return"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.id == ADMIN_ID:
        keyboard.add(
            InlineKeyboardButton("üìã –í—ã–¥–∞–Ω–Ω—ã–µ", callback_data="admin_issued"),
            InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="admin_report")
        )
        keyboard.add(
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="admin_history"),
            InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–∫–∏", callback_data="admin_overdue")
        )

    welcome_text = (
        f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!*\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "‚îå üõ†Ô∏è *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã* - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
        "‚îú üîç *–ü–æ–∏—Å–∫* - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚îú üì∏ *–í–µ—Ä–Ω—É—Ç—å* - –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n"
        "‚îî ‚ÑπÔ∏è *–ü–æ–º–æ—â—å* - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è—Ö –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id == ADMIN_ID:
        welcome_text += "\n*–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
        welcome_text += "‚îå üìã *–í—ã–¥–∞–Ω–Ω—ã–µ* - —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö\n"
        welcome_text += "‚îú üìä *–û—Ç—á—ë—Ç* - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        welcome_text += "‚îú üìú *–ò—Å—Ç–æ—Ä–∏—è* - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        welcome_text += "‚îî ‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–∫–∏* - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ\n"

    await message.reply(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "help")
async def show_help(callback_query: types.CallbackQuery):
    help_text = (
        "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º*\n\n"
        "*1. –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤*\n"
        "‚îå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üõ†Ô∏è *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*\n"
        "‚îî –£–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å\n\n"
        "*2. –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n"
        "‚îå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üîç *–ü–æ–∏—Å–∫*\n"
        "‚îî –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è\n\n"
        "*3. –í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n"
        "‚îå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üì∏ *–í–µ—Ä–Ω—É—Ç—å*\n"
        "‚îú –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "‚îî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n\n"
        "üí° *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ*\n"
        "‚Ä¢ –ó–µ–ª—ë–Ω—ã–π —Å—Ç–∞—Ç—É—Å üü¢ - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω\n"
        "‚Ä¢ –ö—Ä–∞—Å–Ω—ã–π —Å—Ç–∞—Ç—É—Å üî¥ - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–¥–∞–Ω\n"
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üõ†Ô∏è –ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º", callback_data="tools"),
        InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )

    await callback_query.message.reply(help_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def main_menu(callback_query: types.CallbackQuery):
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="tools"),
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_tools")
        )
        keyboard.add(
            InlineKeyboardButton("üì∏ –í–µ—Ä–Ω—É—Ç—å", callback_data="return"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        )
        
        if callback_query.from_user.id == ADMIN_ID:
            keyboard.add(
                InlineKeyboardButton("üìã –í—ã–¥–∞–Ω–Ω—ã–µ", callback_data="admin_issued"),
                InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="admin_report")
            )
            keyboard.add(
                InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="admin_history"),
                InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–∫–∏", callback_data="admin_overdue")
            )

        menu_text = (
            "ü§ñ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
            "‚îå üõ†Ô∏è *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã* - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
            "‚îú üîç *–ü–æ–∏—Å–∫* - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚îú üì∏ *–í–µ—Ä–Ω—É—Ç—å* - –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n"
            "‚îî ‚ÑπÔ∏è *–ü–æ–º–æ—â—å* - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è—Ö –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if callback_query.from_user.id == ADMIN_ID:
            menu_text += "\n*–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
            menu_text += "‚îå üìã *–í—ã–¥–∞–Ω–Ω—ã–µ* - —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö\n"
            menu_text += "‚îú üìä *–û—Ç—á—ë—Ç* - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            menu_text += "‚îú üìú *–ò—Å—Ç–æ—Ä–∏—è* - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            menu_text += "‚îî ‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–∫–∏* - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ\n"

        await callback_query.message.reply(menu_text, reply_markup=keyboard, parse_mode="Markdown")
        
        try:
            await callback_query.answer()
        except:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è)")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ main_menu: {e}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass

@dp.callback_query_handler(lambda c: c.data == "tools" or c.data.startswith("tools_page_"))
async def show_tools(callback_query: types.CallbackQuery):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if callback_query.data == "tools":
        current_page = 0
    else:
        current_page = int(callback_query.data.split("_")[2])
    
    logger.info(f"DEBUG: –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_tools —Å callback_data={callback_query.data}")
    tools = get_tools()
    logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    grouped_tools = {}
    for tool_id, name, status, quantity in tools:
        if name not in grouped_tools:
            grouped_tools[name] = {
                'ids': [],
                'total_qty': 0,
                'available_qty': 0
            }
        grouped_tools[name]['ids'].append(tool_id)
        grouped_tools[name]['total_qty'] += quantity
        
    # –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    issued_tools = get_issued_tools()
    for name, info in grouped_tools.items():
        issued_count = len([t for t in issued_tools if t[1] in info['ids']])
        info['available_qty'] = info['total_qty'] - issued_count
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    sorted_tools = sorted(grouped_tools.items())
    total_pages = (len(sorted_tools) + TOOLS_PER_PAGE - 1) // TOOLS_PER_PAGE
    start_idx = current_page * TOOLS_PER_PAGE
    end_idx = min(start_idx + TOOLS_PER_PAGE, len(sorted_tools))
    current_tools = sorted_tools[start_idx:end_idx]
    
    response = f"üõ†Ô∏è *–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤* (—Å—Ç—Ä. {current_page + 1}/{total_pages})\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for name, info in current_tools:
        status_text = f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {info['available_qty']} –∏–∑ {info['total_qty']}" if info['available_qty'] > 0 else "üî¥ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        
        response += f"‚îå *{name}*\n"
        response += f"‚îî –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if info['available_qty'] > 0:
            keyboard.add(
                InlineKeyboardButton(
                    f"üì• –í–∑—è—Ç—å {name}", 
                    callback_data=f"select_tool_{info['ids'][0]}"
                )
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tools_page_{current_page - 1}")
        )
    if current_page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"tools_page_{current_page + 1}")
        )
    if nav_buttons:
        keyboard.row(*nav_buttons)
    
    keyboard.add(
        InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    await callback_query.message.reply(response, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data.startswith("select_tool_"))
async def select_tool(callback_query: types.CallbackQuery):
    try:
        tool_id = int(callback_query.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = dp.current_state(user=callback_query.from_user.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(tool_id=tool_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û
        await state.set_state(ToolIssueState.waiting_for_fullname.state)
        
        await callback_query.message.answer(
            "üë§ *–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            parse_mode="Markdown"
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
        try:
            await callback_query.answer()
        except:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è)")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ select_tool: {e}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass

@dp.message_handler(state=ToolIssueState.waiting_for_fullname)
async def process_employee_fullname(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = dp.current_state(user=message.from_user.id)
    
    employee_fullname = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    tool_id = data.get('tool_id')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if create_tool_request(tool_id, employee_fullname, message.chat.id):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        tools = get_tools()
        tool_name = next((tool[1] for tool in tools if tool[0] == tool_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"*–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* {tool_name}\n"
            f"*–§–ò–û:* {employee_fullname}\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            parse_mode="Markdown"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_keyboard = InlineKeyboardMarkup(row_width=2)
        admin_keyboard.add(
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{tool_id}_{message.chat.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{tool_id}_{message.chat.id}")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"üìù *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n\n"
            f"*–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* {tool_name}\n"
            f"*–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* {employee_fullname}\n"
            f"*–ß–∞—Ç ID:* {message.chat.id}",
            reply_markup=admin_keyboard,
            parse_mode="Markdown"
        )
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query_handler(lambda c: c.data.startswith(('approve_', 'reject_')))
async def process_admin_issue_response(callback_query: types.CallbackQuery):
    try:
        logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–¥–∞—á–∏: {callback_query.data}")
        # Parse callback data
        data = callback_query.data.split('_')
        if len(data) != 3:
            logging.error(f"DEBUG: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback_query.data}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        action = data[0]  # approve –∏–ª–∏ reject
        tool_id = int(data[1])
        user_id = int(data[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        db = DatabaseConnection()
        with db.connection:
            cursor = db.connection.cursor()
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                cursor.execute('''
                    SELECT id, employee_name 
                    FROM issue_requests 
                    WHERE tool_id = ? AND chat_id = ? AND status = "pending"
                ''', (tool_id, user_id))
                request = cursor.fetchone()
                
                if not request:
                    logging.error(f"DEBUG: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è tool_id={tool_id}, user_id={user_id}")
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    return
                    
                request_id, employee_name = request
                
                if action == "approve":
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    cursor.execute('UPDATE tools SET status = "issued" WHERE id = ?', (tool_id,))
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ
                    cursor.execute('''
                        INSERT INTO issued_tools (tool_id, employee_name, issue_date, expected_return_date)
                        VALUES (?, ?, CURRENT_TIMESTAMP, date('now', '+7 days'))
                    ''', (tool_id, employee_name))
                    
                    # –ü–æ–ª—É—á–∞–µ–º id —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    issue_id = cursor.lastrowid
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
                    cursor.execute('UPDATE issue_requests SET status = "approved" WHERE id = ?', (request_id,))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                    cursor.execute('''
                        INSERT INTO tool_history (tool_id, action, employee_name, timestamp)
                        VALUES (?, ?, ?, CURRENT_TIMESTAMP)
                    ''', (tool_id, 'issued', employee_name))
                    
                    db.connection.commit()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    cursor.execute('SELECT name FROM tools WHERE id = ?', (tool_id,))
                    tool_name = cursor.fetchone()[0]
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await bot.send_message(
                        user_id,
                        f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω!\n\n"
                        f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}\n"
                        f"üìù –ù–æ–º–µ—Ä –≤—ã–¥–∞—á–∏: {issue_id}\n"
                        f"‚è≥ –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π\n\n"
                        f"‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–æ–≤—Ä–µ–º—è",
                        reply_markup=InlineKeyboardMarkup().add(
                            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        )
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                    await callback_query.message.edit_text(
                        f"{callback_query.message.text}\n\n"
                        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ",
                        reply_markup=None
                    )
                elif action == "reject":
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
                    cursor.execute('UPDATE issue_requests SET status = "rejected" WHERE id = ?', (request_id,))
                    
                    db.connection.commit()
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await bot.send_message(
                        user_id,
                        "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω."
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                    await callback_query.message.edit_text(
                        f"{callback_query.message.text}\n\n"
                        "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
                        reply_markup=None
                    )
            except Exception as e:
                db.connection.rollback()
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return
            finally:
                cursor.close()
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "search_tools")
async def search_tools_start(callback_query: types.CallbackQuery):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    await SearchState.waiting_for_query.set()
    await callback_query.message.reply("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:")

@dp.message_handler(state=SearchState.waiting_for_query)
async def process_search(message: types.Message, state: FSMContext):
    query = message.text.lower()
    tools = get_tools()
    
    found_tools = []
    for tool in tools:
        if query in tool[1].lower():
            found_tools.append(tool)
    
    if not found_tools:
        await message.reply("‚ùå *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", parse_mode="Markdown")
    else:
        response = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n"
        for tool in found_tools:
            status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if not is_tool_issued(tool[0]) else "üî¥ –í—ã–¥–∞–Ω"
            response += f"‚îå *{tool[1]}*\n"
            response += f"‚îî –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_tools"),
            InlineKeyboardButton("üìã –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="tools")
        )
        
        await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "return")
async def show_return_menu(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    try:
        logger.info("DEBUG: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        issued_tools = get_issued_tools()
        logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ {len(issued_tools)} –≤—ã–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

        if not issued_tools:
            await callback_query.message.edit_text(
                "‚ùå *–ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤*\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
            )
            return

        keyboard = InlineKeyboardMarkup(row_width=1)
        for tool in issued_tools:
            try:
                tool_id, name, employee, issue_date, expected_return = tool
                if issue_date:
                    issue_date = datetime.strptime(issue_date, '%Y-%m-%d').strftime('%d.%m.%Y')
                else:
                    issue_date = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                    
                if expected_return:
                    expected_return = datetime.strptime(expected_return, '%Y-%m-%d').strftime('%d.%m.%Y')
                else:
                    expected_return = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                
                button_text = f"üîß {name} - {employee} (–¥–æ {expected_return})"
                keyboard.add(InlineKeyboardButton(button_text, callback_data=f"return_tool_{tool_id}"))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
                continue

        keyboard.add(InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

        await callback_query.message.edit_text(
            "*üìã –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:*\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å.",
            parse_mode="Markdown",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
        )

@dp.callback_query_handler(lambda c: c.data.startswith("return_tool_"))
async def return_tool(callback_query: types.CallbackQuery):
    try:
        logging.info(f"DEBUG: –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å callback_data={callback_query.data}")
        tool_id = int(callback_query.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞–Ω–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        issued_tool = get_issued_tool_by_id(tool_id)
        if not issued_tool:
            logging.error(f"DEBUG: –ù–µ –Ω–∞–π–¥–µ–Ω –≤—ã–¥–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å ID {tool_id}")
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
            )
            await callback_query.answer()
            return

        issue_id, tool_name, employee = issued_tool[0], issued_tool[2], issued_tool[3]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state = dp.current_state(user=callback_query.from_user.id)
        await state.set_state(ReturnToolStates.waiting_for_photo.state)
        async with state.proxy() as data:
            data['issue_id'] = issue_id
            data['tool_name'] = tool_name
            data['employee'] = employee

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        await callback_query.message.edit_text(
            f"üì∏ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ *{tool_name}* –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:\n\n"
            "‚úÖ –ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã:\n"
            "- –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n"
            "- –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
            "- –ö–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å\n\n"
            "‚ùóÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ–µ –∏ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–æ",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_return")
            )
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
        )
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "cancel_return", state=ReturnToolStates.waiting_for_photo)
async def cancel_return(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info("DEBUG: –û—Ç–º–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
        await state.finish()
        await callback_query.message.edit_text(
            "‚ùå –í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–∞",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_query="main_menu")
            )
        )
        await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('reject_return_'))
async def reject_return(callback_query: types.CallbackQuery):
    try:
        logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞: {callback_query.data}")
        # Parse callback data
        data = callback_query.data.split('_')
        if len(data) != 4:
            logging.error(f"DEBUG: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback_query.data}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        issue_id = int(data[2])
        user_id = int(data[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
        return_info = get_return_info(issue_id)
        if not return_info:
            logging.error(f"DEBUG: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å ID {issue_id}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback_query.message.edit_caption(
            callback_query.message.caption + "\n\n‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω",
            reply_markup=None
        )
        logging.info(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            f"‚ùå –í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
            "–ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–º–∏:\n"
            "- –ù–µ—á–µ—Ç–∫–æ–µ –∏–ª–∏ –ø–ª–æ—Ö–æ –æ—Å–≤–µ—â–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ\n"
            "- –ù–µ –≤–∏–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n"
            "- –ù–µ –≤–∏–¥–Ω–æ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä\n"
            "- –ù–µ–∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"return_tool_{return_info[1]}"),
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
        )
        logging.info(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await callback_query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
        )

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def show_main_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await show_welcome(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == "help")
async def show_help_command(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await show_help(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == "search_tools")
async def search_tools_command(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await ToolSearch.waiting_for_query.set()

@dp.callback_query_handler(lambda c: c.data == "admin_history")
async def show_admin_history(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await callback_query.answer()
    history = get_tool_history()
    if not history:
        await callback_query.message.edit_text(
            "üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞", 
            reply_markup=get_admin_keyboard()
        )
        return

    text = "üìú *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n"
    for entry in history:
        tool_name, action, employee, date = entry
        text += f"üîß *{tool_name}*\n"
        text += f"‚ú® –î–µ–π—Å—Ç–≤–∏–µ: _{action}_\n"
        text += f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: _{employee}_\n"
        text += f"üìÖ –î–∞—Ç–∞: {date}\n\n"

    await callback_query.message.edit_text(
        text, 
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "admin_overdue")
async def show_overdue_tools(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await callback_query.answer()
    overdue_tools = get_overdue_tools()
    
    if not overdue_tools:
        await callback_query.message.edit_text(
            "‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", 
            reply_markup=get_admin_keyboard()
        )
        return

    text = "‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*\n\n"
    for tool in overdue_tools:
        name, employee, issue_date, expected_return = tool
        text += f"üîß *{name}*\n"
        text += f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: _{employee}_\n"
        text += f"üìÖ –í—ã–¥–∞–Ω: {issue_date}\n"
        text += f"‚è∞ –û–∂–∏–¥–∞–ª—Å—è –≤–æ–∑–≤—Ä–∞—Ç: {expected_return}\n\n"

    await callback_query.message.edit_text(
        text, 
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "tools")
async def show_tools_command(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await show_tools(callback_query.message)

@dp.callback_query_handler(lambda c: c.data == "return")
async def return_tool_command(callback_query: types.CallbackQuery):
    await callback_query.answer()
    issued_tools = get_issued_tools()
    
    if not issued_tools:
        await callback_query.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
            reply_markup=get_main_keyboard()
        )
        return

    text = "üîß *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:*\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for tool in issued_tools:
        tool_id, name, employee, issue_date = tool
        if employee == callback_query.from_user.full_name:
            text += f"‚Ä¢ {name} (–≤—ã–¥–∞–Ω {issue_date})\n"
            keyboard.add(InlineKeyboardButton(
                f"–í–µ—Ä–Ω—É—Ç—å: {name}", 
                callback_data=f"return_{tool_id}"
            ))
    
    keyboard.add(InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback_query.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "admin_report")
async def show_admin_report(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await callback_query.answer()
    tools = get_tools()
    issued = get_issued_tools()
    
    total_tools = sum(tool[3] for tool in tools)  # –°—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    issued_count = len(issued)

    text = "üìä *–û—Ç—á–µ—Ç –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º*\n\n"
    text += f"üì¶ –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {total_tools}\n"
    text += f"üì§ –í—ã–¥–∞–Ω–æ: {issued_count}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—Ä–µ–Ω–¥–∞–º
    brands = {}
    for tool in tools:
        brand = tool[1].split(' - ')[0] if ' - ' in tool[1] else '–î—Ä—É–≥–æ–µ'
        brands[brand] = brands.get(brand, 0) + 1

    text += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º:*\n"
    for brand, count in sorted(brands.items(), key=lambda x: x[1], reverse=True):
        text += f"‚Ä¢ {brand}: {count}\n"

    await callback_query.message.edit_text(
        text,
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "admin_issued")
async def show_admin_issued(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await callback_query.answer()
    issued_tools = get_issued_tools()
    
    if not issued_tools:
        await callback_query.message.edit_text(
            "üìã –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", 
            reply_markup=get_admin_keyboard()
        )
        return

    text = "üìã *–í—ã–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*\n\n"
    for tool in issued_tools:
        tool_id, name, employee, issue_date = tool
        text += f"üîß *{name}*\n"
        text += f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: _{employee}_\n"
        text += f"üìÖ –í—ã–¥–∞–Ω: {issue_date}\n\n"

    await callback_query.message.edit_text(
        text,
        reply_markup=get_admin_keyboard(),
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def show_main_menu(callback_query: types.CallbackQuery):
    try:
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard.add(
            InlineKeyboardButton("üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="tools"),
            InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å", callback_data="return")
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if str(callback_query.from_user.id) == ADMIN_ID:
            keyboard.add(InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin"))

        await callback_query.message.edit_text(
            "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="main_menu")
            )
        )

@dp.callback_query_handler(lambda c: c.data == "tools")
async def show_tools_command(callback_query: types.CallbackQuery):
    try:
        logger.info("DEBUG: –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_tools —Å callback_data=tools")
        tools = get_tools()
        logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools}")
        
        if not tools:
            await callback_query.message.edit_text(
                "‚ùå *–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç*\n\n"
                "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        issued_tools = get_issued_tools()
        issued_tool_ids = [tool[0] for tool in issued_tools]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –±—Ä–µ–Ω–¥–∞–º
        tools_by_brand = {}
        for tool in tools:
            brand = tool[1].split(' - ')[0] if ' - ' in tool[1] else '–î—Ä—É–≥–æ–µ'
            if brand not in tools_by_brand:
                tools_by_brand[brand] = []
            tools_by_brand[brand].append(tool)

        text = "üõ†Ô∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:*\n\n"
        keyboard = InlineKeyboardMarkup(row_width=1)

        for brand in sorted(tools_by_brand.keys()):
            brand_tools = tools_by_brand[brand]
            text += f"*{brand}:*\n"
            for tool in brand_tools:
                status = "‚ùå –í—ã–¥–∞–Ω" if tool[0] in issued_tool_ids else "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
                text += f"‚Ä¢ {tool[1]} - {status}\n"
            text += "\n"

        text += "\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for tool in tools:
            if tool[0] not in issued_tool_ids:
                keyboard.add(InlineKeyboardButton(
                    f"üì¶ {tool[1]}", 
                    callback_data=f"select_tool_{tool[0]}"
                ))

        keyboard.add(InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        await callback_query.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
        )

@dp.callback_query_handler(lambda c: c.data.startswith("select_tool_"))
async def select_tool_command(callback_query: types.CallbackQuery):
    try:
        tool_id = int(callback_query.data.replace("select_tool_", ""))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–¥–∞–Ω –ª–∏ —É–∂–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        if is_tool_issued(tool_id):
            await callback_query.message.edit_text(
                "‚ùå –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–∂–µ –≤—ã–¥–∞–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="tools"),
                    InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        tools = get_tools()
        tool_info = next((tool for tool in tools if tool[0] == tool_id), None)
        
        if not tool_info:
            await callback_query.message.edit_text(
                "‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="tools"),
                    InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
            )
            return

        await ToolIssueState.waiting_for_fullname.set()
        await callback_query.message.edit_text(
            f"üõ†Ô∏è *–í—ã–±—Ä–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* {tool_info[1]}\n\n"
            "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: _–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á_",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_issue")
            )
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ state
        async with dp.current_state().proxy() as data:
            data['tool_id'] = tool_id
            data['tool_name'] = tool_info[1]

    except ValueError as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="tools"),
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
        )

@dp.callback_query_handler(lambda c: c.data == "cancel_issue", state=ToolIssueState.waiting_for_fullname)
async def cancel_issue(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.answer("–í—ã–¥–∞—á–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback_query.message.edit_text(
        "‚ùå –í—ã–¥–∞—á–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
    )

# –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
WEBHOOK_HOST = 'https://igorka.onrender.com'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

app = web.Application()

async def on_startup(app):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBHOOK_URL:
        await bot.delete_webhook()
        await bot.set_webhook(WEBHOOK_URL)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–µ–±—Ö—É–∫ –Ω–∞ " + WEBHOOK_URL)

async def on_shutdown(app):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏"""
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    if request.match_info.get('token') != bot.token:
        return web.Response(status=403)
    
    request_data = await request.json()
    update = types.Update(**request_data)
    await dp.process_update(update)
    return web.Response(status=200)

def setup_routes(app: web.Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app.router.add_post(f'{WEBHOOK_PATH}/', handle_webhook)

def register_handlers(dp: Dispatcher):
    # Basic handlers
    dp.register_message_handler(start, commands=['start'])
    dp.register_callback_query_handler(show_help, lambda c: c.data == "help")
    dp.register_callback_query_handler(main_menu, lambda c: c.data == "main_menu")
    
    # Tool management handlers
    dp.register_callback_query_handler(show_tools, lambda c: c.data == "tools")
    dp.register_callback_query_handler(select_tool, lambda c: c.data.startswith('select_tool_'))
    dp.register_message_handler(process_employee_fullname, state=ToolIssueState.waiting_for_fullname)
    
    # Admin handlers
    dp.register_callback_query_handler(process_admin_issue_response, lambda c: c.data.startswith(('approve_', 'reject_')))
    dp.register_callback_query_handler(show_admin_history, lambda c: c.data == "admin_history")
    dp.register_callback_query_handler(show_admin_report, lambda c: c.data == "admin_report")
    dp.register_callback_query_handler(show_admin_issued, lambda c: c.data == "admin_issued")
    dp.register_callback_query_handler(show_overdue_tools, lambda c: c.data == "overdue_tools")
    
    # Search handlers
    dp.register_callback_query_handler(search_tools_start, lambda c: c.data == "search")
    dp.register_message_handler(process_search, state=SearchState.waiting_for_query)
    
    # Return handlers
    dp.register_callback_query_handler(show_return_menu, lambda c: c.data == "return")
    dp.register_callback_query_handler(return_tool, lambda c: c.data.startswith('return_tool_'))
    dp.register_callback_query_handler(cancel_return, lambda c: c.data == "cancel_return", state="*")
    dp.register_callback_query_handler(reject_return, lambda c: c.data.startswith('reject_return_'))
    dp.register_callback_query_handler(approve_return, lambda c: c.data.startswith('approve_return_'))
    dp.register_message_handler(process_return_photo, content_types=['photo'], state=ReturnToolStates.waiting_for_photo)

@dp.callback_query_handler(lambda c: c.data.startswith('approve_return_'))
async def approve_return(callback_query: types.CallbackQuery):
    try:
        logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞: {callback_query.data}")
        # Parse callback data
        data = callback_query.data.split('_')
        if len(data) != 4:
            logging.error(f"DEBUG: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback_query.data}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        issue_id = int(data[2])
        user_id = int(data[3])
        
        db = DatabaseConnection()
        with db.connection:
            cursor = db.connection.cursor()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
                cursor.execute("""
                    SELECT t.id, t.name, it.employee_name, it.issue_date
                    FROM issued_tools it
                    JOIN tools t ON it.tool_id = t.id
                    WHERE it.id = ?
                """, (issue_id,))
                
                return_info = cursor.fetchone()
                if not return_info:
                    logging.error(f"DEBUG: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å ID {issue_id}")
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                tool_id, tool_name, employee_name, issue_date = return_info
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                cursor.execute("UPDATE tools SET status = 'available' WHERE id = ?", (tool_id,))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞
                return_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                cursor.execute("""
                    UPDATE issued_tools 
                    SET return_date = ? 
                    WHERE id = ?
                """, (return_date, issue_id))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                cursor.execute("""
                    INSERT INTO tool_history (tool_id, action, employee_name, timestamp)
                    VALUES (?, 'returned', ?, ?)
                """, (tool_id, employee_name, return_date))
                
                db.connection.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(
                    user_id,
                    f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                    f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}\n"
                    f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date}",
                    reply_markup=InlineKeyboardMarkup().add(
                        InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    )
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                await callback_query.message.edit_text(
                    f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n"
                    f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}\n"
                    f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee_name}\n"
                    f"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {issue_date}\n"
                    f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date}",
                    reply_markup=None
                )
                
            except Exception as e:
                db.connection.rollback()
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        
    await callback_query.answer()

@dp.message_handler(content_types=['photo'], state=ReturnToolStates.waiting_for_photo)
async def process_return_photo(message: types.Message, state: FSMContext):
    try:
        logging.info("DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        async with state.proxy() as data:
            issue_id = data['issue_id']
            tool_name = data['tool_name']
            employee = data['employee']
            
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo = message.photo[-1]
        file_id = photo.file_id
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_keyboard = InlineKeyboardMarkup(row_width=2)
        admin_keyboard.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_return_{issue_id}_{message.from_user.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_return_{issue_id}_{message.from_user.id}")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω—É
        admin_message = (
            f"üì∏ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n\n"
            f"üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee}\n"
            f"üÜî ID –≤—ã–¥–∞—á–∏: {issue_id}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_photo(
            chat_id=ADMIN_ID,
            photo=file_id,
            caption=admin_message,
            reply_markup=admin_keyboard
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(
            "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
        )
        await state.finish()

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        create_tables()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logging.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...')
        tools = get_tools()
        logging.info(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(tools)}')
        
        if len(tools) == 0:
            logging.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...')
            populate_database()
            tools = get_tools()
            logging.info(f'–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = Bot(token=API_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(bot, storage=storage)
    dp.middleware.setup(LoggingMiddleware())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_handlers(dp)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    app = web.Application()
    setup_routes(app)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info('Bot started')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(
        app,
        host='0.0.0.0',
        port=int(os.getenv('PORT', 8080))
    )