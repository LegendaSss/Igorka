import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import create_tables, get_tools, get_issued_tools, return_tool, get_tool_history, get_overdue_tools, is_tool_issued, issue_tool, create_tool_request, get_issue_request_info, approve_issue_request, reject_issue_request
from config import API_TOKEN
from datetime import datetime
import os
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = API_TOKEN
ADMIN_ID = 1495719377  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
Bot.set_current(bot)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
tools = get_tools()
logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(tools)}")
if tools:
    logger.info("–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
    for tool in tools[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        logger.info(f"- {tool}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
create_tables()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
dp.middleware.setup(LoggingMiddleware())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
class ToolReturnState(StatesGroup):
    waiting_for_tool_id = State()
    waiting_for_photo = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchState(StatesGroup):
    waiting_for_query = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏
class ToolIssueState(StatesGroup):
    waiting_for_fullname = State()

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
TOOLS_PER_PAGE = 10

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.add(
        InlineKeyboardButton("üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="tools"),
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_tools")
    )
    keyboard.add(
        InlineKeyboardButton("üì∏ –í–µ—Ä–Ω—É—Ç—å", callback_data="return"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.id == ADMIN_ID:
        keyboard.add(
            InlineKeyboardButton("üìã –í—ã–¥–∞–Ω–Ω—ã–µ", callback_data="admin_issued"),
            InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="admin_report")
        )
        keyboard.add(
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="admin_history"),
            InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–∫–∏", callback_data="admin_overdue")
        )

    welcome_text = (
        f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!*\n\n"
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "‚îå üõ†Ô∏è *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã* - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
        "‚îú üîç *–ü–æ–∏—Å–∫* - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚îú üì∏ *–í–µ—Ä–Ω—É—Ç—å* - –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n"
        "‚îî ‚ÑπÔ∏è *–ü–æ–º–æ—â—å* - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è—Ö –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id == ADMIN_ID:
        welcome_text += "\n*–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
        welcome_text += "‚îå üìã *–í—ã–¥–∞–Ω–Ω—ã–µ* - —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö\n"
        welcome_text += "‚îú üìä *–û—Ç—á—ë—Ç* - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        welcome_text += "‚îú üìú *–ò—Å—Ç–æ—Ä–∏—è* - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        welcome_text += "‚îî ‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–∫–∏* - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ\n"

    await message.reply(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "help")
async def show_help(callback_query: types.CallbackQuery):
    help_text = (
        "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º*\n\n"
        "*1. –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤*\n"
        "‚îå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üõ†Ô∏è *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*\n"
        "‚îî –£–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å\n\n"
        "*2. –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n"
        "‚îå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üîç *–ü–æ–∏—Å–∫*\n"
        "‚îî –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è\n\n"
        "*3. –í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n"
        "‚îå –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üì∏ *–í–µ—Ä–Ω—É—Ç—å*\n"
        "‚îú –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "‚îî –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n\n"
        "üí° *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ*\n"
        "‚Ä¢ –ó–µ–ª—ë–Ω—ã–π —Å—Ç–∞—Ç—É—Å üü¢ - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω\n"
        "‚Ä¢ –ö—Ä–∞—Å–Ω—ã–π —Å—Ç–∞—Ç—É—Å üî¥ - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–¥–∞–Ω\n"
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üõ†Ô∏è –ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º", callback_data="tools"),
        InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )

    await callback_query.message.reply(help_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def main_menu(callback_query: types.CallbackQuery):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.add(
        InlineKeyboardButton("üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="tools"),
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_tools")
    )
    keyboard.add(
        InlineKeyboardButton("üì∏ –í–µ—Ä–Ω—É—Ç—å", callback_data="return"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if callback_query.from_user.id == ADMIN_ID:
        keyboard.add(
            InlineKeyboardButton("üìã –í—ã–¥–∞–Ω–Ω—ã–µ", callback_data="admin_issued"),
            InlineKeyboardButton("üìä –û—Ç—á—ë—Ç", callback_data="admin_report")
        )
        keyboard.add(
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="admin_history"),
            InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–∫–∏", callback_data="admin_overdue")
        )

    menu_text = (
        "ü§ñ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "‚îå üõ†Ô∏è *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã* - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n"
        "‚îú üîç *–ü–æ–∏—Å–∫* - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚îú üì∏ *–í–µ—Ä–Ω—É—Ç—å* - –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n"
        "‚îî ‚ÑπÔ∏è *–ü–æ–º–æ—â—å* - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è—Ö –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if callback_query.from_user.id == ADMIN_ID:
        menu_text += "\n*–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
        menu_text += "‚îå üìã *–í—ã–¥–∞–Ω–Ω—ã–µ* - —Å–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö\n"
        menu_text += "‚îú üìä *–û—Ç—á—ë—Ç* - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        menu_text += "‚îú üìú *–ò—Å—Ç–æ—Ä–∏—è* - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        menu_text += "‚îî ‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–∫–∏* - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ\n"

    await callback_query.message.reply(menu_text, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data == "tools" or c.data.startswith("tools_page_"))
async def show_tools(callback_query: types.CallbackQuery):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if callback_query.data == "tools":
        current_page = 0
    else:
        current_page = int(callback_query.data.split("_")[2])
    
    logger.info(f"DEBUG: –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_tools —Å callback_data={callback_query.data}")
    tools = get_tools()
    logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    grouped_tools = {}
    for tool_id, name, status, quantity in tools:
        if name not in grouped_tools:
            grouped_tools[name] = {
                'ids': [],
                'total_qty': 0,
                'available_qty': 0
            }
        grouped_tools[name]['ids'].append(tool_id)
        grouped_tools[name]['total_qty'] += quantity
        
    # –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    issued_tools = get_issued_tools()
    for name, info in grouped_tools.items():
        issued_count = len([t for t in issued_tools if t[1] in info['ids']])
        info['available_qty'] = info['total_qty'] - issued_count
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    sorted_tools = sorted(grouped_tools.items())
    total_pages = (len(sorted_tools) + TOOLS_PER_PAGE - 1) // TOOLS_PER_PAGE
    start_idx = current_page * TOOLS_PER_PAGE
    end_idx = min(start_idx + TOOLS_PER_PAGE, len(sorted_tools))
    current_tools = sorted_tools[start_idx:end_idx]
    
    response = f"üõ†Ô∏è *–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤* (—Å—Ç—Ä. {current_page + 1}/{total_pages})\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for name, info in current_tools:
        status_text = f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {info['available_qty']} –∏–∑ {info['total_qty']}" if info['available_qty'] > 0 else "üî¥ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        
        response += f"‚îå *{name}*\n"
        response += f"‚îî –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if info['available_qty'] > 0:
            keyboard.add(
                InlineKeyboardButton(
                    f"üì• –í–∑—è—Ç—å {name}", 
                    callback_data=f"select_tool_{info['ids'][0]}"
                )
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tools_page_{current_page - 1}")
        )
    if current_page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"tools_page_{current_page + 1}")
        )
    if nav_buttons:
        keyboard.row(*nav_buttons)
    
    keyboard.add(
        InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    await callback_query.message.reply(response, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data.startswith("select_tool_"))
async def select_tool(callback_query: types.CallbackQuery, state: FSMContext):
    tool_id = int(callback_query.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(tool_id=tool_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û
    await ToolIssueState.waiting_for_fullname.set()
    
    await callback_query.message.answer(
        "üë§ *–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        parse_mode="Markdown"
    )
    await callback_query.answer()

@dp.message_handler(state=ToolIssueState.waiting_for_fullname)
async def process_employee_fullname(message: types.Message, state: FSMContext):
    employee_fullname = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    tool_id = data.get('tool_id')
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if create_tool_request(tool_id, employee_fullname, message.chat.id):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        tools = get_tools()
        tool_name = next((tool[1] for tool in tools if tool[0] == tool_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"*–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* {tool_name}\n"
            f"*–§–ò–û:* {employee_fullname}\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            parse_mode="Markdown"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_keyboard = InlineKeyboardMarkup(row_width=2)
        admin_keyboard.add(
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{tool_id}_{message.chat.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{tool_id}_{message.chat.id}")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"üìù *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n\n"
            f"*–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* {tool_name}\n"
            f"*–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* {employee_fullname}\n"
            f"*–ß–∞—Ç ID:* {message.chat.id}",
            reply_markup=admin_keyboard,
            parse_mode="Markdown"
        )
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith(("approve_", "reject_")))
async def process_admin_issue_response(callback_query: types.CallbackQuery):
    logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω callback: {callback_query.data}")
    
    try:
        parts = callback_query.data.split("_")
        if len(parts) != 3:
            logger.error(f"DEBUG: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback data: {callback_query.data}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
            return
            
        action = parts[0]  # approve –∏–ª–∏ reject
        tool_id = int(parts[1])
        chat_id = int(parts[2])
        
        logger.info(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ {action} –¥–ª—è tool_id={tool_id}, chat_id={chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω
        if callback_query.from_user.id != ADMIN_ID:
            logger.warning(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç user_id={callback_query.from_user.id}")
            await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        request_info = get_issue_request_info(tool_id, chat_id)
        logger.info(f"DEBUG: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ: {request_info}")
        
        if action == "approve":
            if request_info and approve_issue_request(tool_id, chat_id):
                logger.info(f"DEBUG: –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                await bot.send_message(
                    chat_id,
                    "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω!\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç."
                )
                await callback_query.message.edit_text(
                    f"{callback_query.message.text}\n\n"
                    "‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω",
                    parse_mode="Markdown"
                )
                await callback_query.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω")
            else:
                logger.error(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
        elif action == "reject":
            if reject_issue_request(tool_id, chat_id):
                logger.info(f"DEBUG: –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                await bot.send_message(
                    chat_id,
                    "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω."
                )
                await callback_query.message.edit_text(
                    f"{callback_query.message.text}\n\n"
                    "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                    parse_mode="Markdown"
                )
                await callback_query.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            else:
                logger.error(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"DEBUG: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query_handler(lambda c: c.data == "search_tools")
async def search_tools_start(callback_query: types.CallbackQuery):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    
    await SearchState.waiting_for_query.set()
    await callback_query.message.reply("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:")

@dp.message_handler(state=SearchState.waiting_for_query)
async def process_search(message: types.Message, state: FSMContext):
    query = message.text.lower()
    tools = get_tools()
    
    found_tools = []
    for tool in tools:
        if query in tool[1].lower():
            found_tools.append(tool)
    
    if not found_tools:
        await message.reply("‚ùå *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", parse_mode="Markdown")
    else:
        response = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n"
        for tool in found_tools:
            status = "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω" if not is_tool_issued(tool[0]) else "üî¥ –í—ã–¥–∞–Ω"
            response += f"‚îå *{tool[1]}*\n"
            response += f"‚îî –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_tools"),
            InlineKeyboardButton("üìã –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="tools")
        )
        
        await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "return")
async def return_tool_request(callback_query: types.CallbackQuery):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    
    issued_tools = get_issued_tools()
    if not issued_tools:
        await callback_query.message.reply(
            "‚ùå *–ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤*\n\n"
            "–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ.",
            parse_mode="Markdown"
        )
        return

    response = "üì• *–í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞*\n\n"
    response += "_–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:_\n\n"

    keyboard = InlineKeyboardMarkup(row_width=1)
    for tool in issued_tools:
        issue_date = tool[3].split()[0] if tool[3] else "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
        button_text = f"üì¶ {tool[1]} (–≤—ã–¥–∞–Ω: {issue_date})"
        keyboard.add(InlineKeyboardButton(button_text, callback_data=f"return_{tool[0]}"))
    
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="tools"))
    
    await callback_query.message.reply(response, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data.startswith("return_"))
async def process_return_tool(callback_query: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    
    try:
        tool_id = int(callback_query.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞–Ω–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
        issued_tools = get_issued_tools()
        tool_info = next((tool for tool in issued_tools if tool[0] == tool_id), None)
        
        if tool_info:
            async with state.proxy() as data:
                data['return_tool_id'] = tool_id
                data['employee_name'] = tool_info[2]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            
            await ToolReturnState.waiting_for_photo.set()
            await callback_query.message.reply("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.")
        else:
            await callback_query.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")

@dp.message_handler(content_types=['photo'], state=ToolReturnState.waiting_for_photo)
async def process_return_photo(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            tool_id = data['return_tool_id']
            employee_name = data['employee_name']
        
        if return_tool(tool_id, employee_name):
            await message.reply(
                "‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω!\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç."
            )
        else:
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    finally:
        await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("admin_"))
async def process_admin_action(callback_query: types.CallbackQuery):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    action = callback_query.data.replace("admin_", "")
    
    if action == "issued":
        issued = get_issued_tools()
        if not issued:
            await callback_query.message.reply(
                "üìã *–í—ã–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*\n\n"
                "–ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.",
                parse_mode="Markdown"
            )
            return
            
        response = "üìã *–í—ã–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*\n\n"
        for tool in issued:
            tool_id, name, employee, issue_date, expected_return = tool
            issue_date = datetime.strptime(issue_date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            expected_return = datetime.strptime(expected_return, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y') if expected_return else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            response += f"‚îå *{name}*\n"
            response += f"‚îú –ö–æ–º—É: _{employee}_\n"
            response += f"‚îú –í—ã–¥–∞–Ω: {issue_date}\n"
            response += f"‚îî –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_return}\n\n"
            
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        await callback_query.message.reply(response, reply_markup=keyboard, parse_mode="Markdown")
        
    elif action == "report":
        tools = get_tools()
        issued = get_issued_tools()
        
        total_tools = sum(tool[3] for tool in tools)  # –°—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        issued_count = len(issued)
        available = total_tools - issued_count
        
        response = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        response += f"‚îå –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {total_tools}\n"
        response += f"‚îú –í—ã–¥–∞–Ω–æ: {issued_count}\n"
        response += f"‚îî –î–æ—Å—Ç—É–ø–Ω–æ: {available}\n"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        await callback_query.message.reply(response, reply_markup=keyboard, parse_mode="Markdown")
        
    elif action == "history":
        history = get_tool_history()
        if not history:
            await callback_query.message.reply(
                "üìú *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n"
                "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.",
                parse_mode="Markdown"
            )
            return
            
        response = "üìú *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n"
        for entry in history:
            name, action, date, employee, notes = entry
            try:
                formatted_date = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
            except ValueError:
                formatted_date = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞"
            
            # Convert action to Russian
            action_text = "–í—ã–¥–∞–Ω" if action == "issue" else "–í–æ–∑–≤—Ä–∞—â–µ–Ω" if action == "return" else action
            
            response += f"‚îå *{name}*\n"
            response += f"‚îú –î–µ–π—Å—Ç–≤–∏–µ: _{action_text}_\n"
            if employee:
                response += f"‚îú –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee}\n"
            response += f"‚îî –î–∞—Ç–∞: {formatted_date}\n\n"
            
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        await callback_query.message.reply(response, reply_markup=keyboard, parse_mode="Markdown")
        
    elif action == "overdue":
        overdue = get_overdue_tools()
        if not overdue:
            await callback_query.message.reply(
                "‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*\n\n"
                "–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.",
                parse_mode="Markdown"
            )
            return
            
        response = "‚ö†Ô∏è *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã*\n\n"
        for tool in overdue:
            tool_id, name, employee, issue_date, expected_return, quantity = tool
            issue_date = datetime.strptime(issue_date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            expected_return = datetime.strptime(expected_return, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y') if expected_return else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            response += f"‚îå *{name}*\n"
            response += f"‚îú –°–æ—Ç—Ä—É–¥–Ω–∏–∫: _{employee}_\n"
            response += f"‚îú –í—ã–¥–∞–Ω: {issue_date}\n"
            response += f"‚îî –û–∂–∏–¥–∞–ª—Å—è: {expected_return}\n\n"
            
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        await callback_query.message.reply(response, reply_markup=keyboard, parse_mode="Markdown")


# –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
WEBHOOK_HOST = 'https://igorka.onrender.com'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

app = web.Application()

async def on_startup(app):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    webhook_info = await bot.get_webhook_info()
    if webhook_info.url != WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
    logger.info("Bot started")

async def on_shutdown(app):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏"""
    await bot.delete_webhook()
    await bot.close()
    logger.info("Bot stopped")

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
    update = types.Update(**await request.json())
    await dp.process_update(update)
    return web.Response(status=200)

def setup_routes(app: web.Application):
    app.router.add_post(WEBHOOK_PATH, handle_webhook)

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    create_tables()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    setup_routes(app)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    web.run_app(app, host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))